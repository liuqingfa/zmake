#!/usr/bin/env python3

import os
import glob
import re
import sys
import argparse


template_files = dict()
template_files['root.mk'] = """\
#	PROJECT-WIDE COMMON COMPILING FLAGS
CC		:=gcc
CFLAGS 		:=-O3 -Wall -Drestrict=__restrict__ -DNDEBUG

CXX		:=g++
CXXFLAGS	:=-O3 -Wall -Drestrict=__restrict__ -DNDEBUG -std=c++11

#       PROJECT-WIDE DEFAULT LINKING LIBRARIES AND INCLUDE DIRECTORIES
INCS		:=-iquote $(ROOT)
LIBS		:=

#       SUPPRESS LENGTHY COMMANDLINE ECHOS
QUIET           :=@

#	INTERNAL VARIABLES
OBJ		:=# .o files
DEP		:=# .d files
ASM		:=# .s files
DEPFLAGS	:=-MMD -MP# preprocessor generates .d files
ASMFLAGS	:=-S# source code commented assembly code
.SUFFIXES:

#	INTERNAL VARIABLES
OBJ		:=# .o files
DEP		:=# .d files
ASM		:=# .s files
DEPFLAGS	:=-MMD -MP# preprocessor generates .d files
ASMFLAGS	:=-S# source code commented assembly code
.SUFFIXES:

#	COLORFUL SHELL ECHO!
NONE		:=\033[00m
#	Normal colors
BLACK		:=\033[00;30m
RED		:=\033[00;31m
GREEN		:=\033[00;32m
BROWN		:=\033[00;33m
BLUE		:=\033[00;34m
MAGENTA		:=\033[00;35m
CYAN		:=\033[00;36m
GREY		:=\033[00;37m
#	Bold
B_BLACK		:=\033[01;30m
B_RED		:=\033[01;31m
B_GREEN		:=\033[01;32m
B_BROWN		:=\033[01;33m
B_BLUE		:=\033[01;34m
B_MAGENTA	:=\033[01;35m
B_CYAN		:=\033[01;36m
B_GREY		:=\033[01;37m
#	Underlined
U_BLACK		:=\033[04;30m
U_RED		:=\033[04;31m
U_GREEN		:=\033[04;32m
U_BROWN		:=\033[04;33m
U_BLUE		:=\033[04;34m
U_MAGENTA	:=\033[04;35m
U_CYAN		:=\033[04;36m
U_GREY		:=\033[04;37m
#	Blinking
BLK_BLACK	:=\033[05;30m
BLK_RED		:=\033[05;31m
BLK_GREEN	:=\033[05;32m
BLK_BROWN	:=\033[05;33m
BLK_BLUE	:=\033[05;34m
BLK_MAGENTA	:=\033[05;35m
BLK_CYAN	:=\033[05;36m
BLK_GREY	:=\033[05;37m
#	Reversed foreground and background color
REV_BLACK	:=\033[07;30m
REV_RED		:=\033[07;31m
REV_GREEN	:=\033[07;32m
REV_BROWN	:=\033[07;33m
REV_BLUE	:=\033[07;34m
REV_MAGENTA	:=\033[07;35m
REV_CYAN	:=\033[07;36m
REV_GREY	:=\033[07;37m
"""


template_files['rules.mk'] = """\
#  THIS DIRECTORY
TMP:=$(realpath $(dir $(lastword $(MAKEFILE_LIST))))
$(TMP)DIR:=$(TMP)

#  ALL C/C++ FILES IN THIS DIRECTORY (WITHOUT PATHNAME)
$($(TMP)DIR)C:=$(wildcard *.c)
$($(TMP)DIR)CC:=$(wildcard *.cc)
$($(TMP)DIR)CPP:=$(wildcard *.cpp)
#  DIRECTORY-SPECIFIC COMPILING FLAGS AND INCLUDE DIRECTORIES
$($(TMP)DIR)CFLAGS:=$(CFLAGS)
$($(TMP)DIR)CXXFLAGS:=$(CXXFLAGS)
$($(TMP)DIR)INCS:=$(INCS)
$($(TMP)DIR)LIBS:=$(LIBS)

DEP:=$(DEP) $($($(TMP)DIR)C:%.c=$($(TMP)DIR)/%.d) $($($(TMP)DIR)CC:%.cc=$($(TMP)DIR)/%.d) $($($(TMP)DIR)CPP:%.cpp=$($(TMP)DIR)/%.d)
OBJ:=$(OBJ) $($($(TMP)DIR)C:%.c=$($(TMP)DIR)/%.o) $($($(TMP)DIR)CC:%.cc=$($(TMP)DIR)/%.o) $($($(TMP)DIR)CPP:%.cpp=$($(TMP)DIR)/%.o)
ASM:=$(ASM) $($($(TMP)DIR)C:%.c=$($(TMP)DIR)/%.s) $($($(TMP)DIR)CC:%.cc=$($(TMP)DIR)/%.s) $($($(TMP)DIR)CPP:%.cpp=$($(TMP)DIR)/%.s)

$($(TMP)DIR)/%.o: $($(TMP)DIR)/%.c
	$(QUIET)$(CC) -o $@ -c $< $(DEPFLAGS) $($($(TMP)DIR)CFLAGS) $($($(TMP)DIR)INCS)
	$(QUIET)echo "Compiling $(GREEN)$(notdir $<) $(NONE)..."
$($(TMP)DIR)/%.s: $($(TMP)DIR)/%.c
	$(QUIET)$(CC) -o $@ $< $(ASMFLAGS) $($($(TMP)DIR)CFLAGS) $($($(TMP)DIR)INCS)
	$(QUIET)echo "Assembly listing $(CYAN)$(notdir $<) $(NONE)..."

$($(TMP)DIR)/%.o: $($(TMP)DIR)/%.cc
	$(QUIET)$(CXX) -o $@ -c $< $(DEPFLAGS) ${$($(TMP)DIR)CXXFLAGS} ${$($(TMP)DIR)INCS}
	$(QUIET)echo "Compiling $(GREEN)$(notdir $<) $(NONE)..."
$($(TMP)DIR)/%.s: $($(TMP)DIR)/%.cc
	$(QUIET)$(CXX) -o $@ $< $(ASMFLAGS) ${$($(TMP)DIR)CXXFLAGS} ${$($(TMP)DIR)INCS}
	$(QUIET)echo "Assembly listing $(CYAN)$(notdir $<) $(NONE)..."

$($(TMP)DIR)/%.o: $($(TMP)DIR)/%.cpp
	$(QUIET)$(CXX) -o $@ -c $< $(DEPFLAGS) $($($(TMP)DIR)CXXFLAGS) $($($(TMP)DIR)INCS)
	$(QUIET)echo "Compiling $(GREEN)$(notdir $<) $(NONE)..."
$($(TMP)DIR)/%.s: $($(TMP)DIR)/%.cpp
	$(QUIET)$(CXX) -o $@ $< $(ASMFLAGS) $($($(TMP)DIR)CXXFLAGS) $($($(TMP)DIR)INCS)
	$(QUIET)echo "Assembly listing $(CYAN)$(notdir $<) $(NONE)..."

# Linking pattern rule for this directory
%.exe: $($(TMP)DIR)/%.o
	$(QUIET)$(CXX) -o $@ $^ $($($(TMP)DIR)LIBS)
	$(QUIET)echo "Linking $(MAGENTA)$(notdir $@) $(NONE)..."
"""

template_files['Makefile'] = """\
ROOT    :=$(realpath #RELATIVE_PATH_TO_ROOT#)
D       :=$(realpath $(dir $(lastword $(MAKEFILE_LIST))))# this directory
-include $(ROOT)/root.mk
-include $(ROOT)/gtest/rules.mk
-include $(D)/rules.mk
# Inlcude more rules.mk here if you this directory depends on them.
-include $(DEP)

# List all the executables you want to run when you type `make test` in $(TESTS)
# Note that you need to -include $(ROOT)/gtest/rules.mk to actually build those
# executables
TESTS:=

.PHONY: all asm clean test
all: $(OBJ)
asm: $(ASM)
clean:
	$(QUIET)rm -f *.exe $(OBJ) $(DEP) $(ASM)
test: $(TESTS)
	$(QUIET)for t in $^ ; do ./"$$t" ; done

# Sample linking rules for building executables:
#test_heapsort.exe: $(D)/heapsort.o $(D)/test_heapsort.o $(ROOT)/utils/utils.o
#gtest_dag.exe: $(ROOT)/gtest/gtest_main.a $(D)/gtest_dag.o $(D)/dag.o
"""

template_files['gtest/rules.mk'] = """\
TMP:=$(realpath $(dir $(lastword $(MAKEFILE_LIST))))
$(TMP)DIR:=$(TMP)

$($(TMP)DIR)CC:=$(wildcard $($(TMP)DIR)/src/*.cc) $(wildcard $($(TMP)DIR)/samples/*.cc)

$($(TMP)DIR)CFLAGS:=$(CFLAGS)
$($(TMP)DIR)CXXFLAGS:=$(CXXFLAGS)
$($(TMP)DIR)INCS:=$(INCS)
$($(TMP)DIR)LIBS:=$(LIBS)

DEP:=$(DEP) $($($(TMP)DIR)CC:%.cc=%.d)
ASM:=$(ASM) $($($(TMP)DIR)CC:%.cc=%.s)

$($(TMP)DIR)/%.o: $($(TMP)DIR)/%.cc
	$(QUIET)$(CXX) -o $@ -c $< $(DEPFLAGS) ${$($(TMP)DIR)CXXFLAGS} ${$($(TMP)DIR)INCS}
	$(QUIET)echo "Compiling $(GREEN)$(notdir $<) $(NONE)..."
$($(TMP)DIR)/%.s: $($(TMP)DIR)/%.cc
	$(QUIET)$(CXX) -o $@ $< $(ASMFLAGS) ${$($(TMP)DIR)CXXFLAGS} ${$($(TMP)DIR)INCS}
	$(QUIET)echo "Assembly listing $(CYAN)$(notdir $<) $(NONE)..."

%.exe: $($(TMP)DIR)/samples/%.o
	$(QUIET)$(CXX) -o $@ $^ ${$($(TMP)DIR)LIBS}
	$(QUIET)echo "Linking $(MAGENTA)$(notdir $@) $(NONE)..."

$($(TMP)DIR)/gtest.a : $($(TMP)DIR)/src/gtest-all.o
	$(QUIET)$(AR) $(ARFLAGS) $@ $^
	$(QUIET)echo "Linking $(MAGENTA)$(notdir $@) $(NONE)..."

$($(TMP)DIR)/gtest_main.a : $($(TMP)DIR)/src/gtest-all.o $($(TMP)DIR)/src/gtest_main.o
	$(QUIET)$(AR) $(ARFLAGS) $@ $^
	$(QUIET)echo "Linking $(MAGENTA)$(notdir $@) $(NONE)..."
"""

template_files['gtest/Makefile'] = """\
ROOT    :=$(realpath ..)
d       :=$(realpath .)#this directory
-include $(ROOT)/root.mk
-include $(ROOT)/gtest/rules.mk
-include $(DEP)

TESTS :=sample1_unittest.exe \
	sample2_unittest.exe \
	sample3_unittest.exe \
	sample4_unittest.exe \
	sample5_unittest.exe \
	sample6_unittest.exe \
	sample7_unittest.exe \
	sample8_unittest.exe \
	sample9_unittest.exe \
	sample10_unittest.exe

.PHONY: all asm clean test
all: $(OBJ)
asm: $(ASM)
clean:
	$(QUIET)rm -f $(OBJ) $(DEP) $(ASM) $(TESTS:%.exe=$(d)/%.exe)
	$(QUIET)rm -f $(d)/samples/*.o $(d)/src/gtest-all.o \
		$(d)/src/gtest_main.o $(d)/gtest_main.a $(d)/gtest.a

test: $(TESTS)
	$(QUIET)for t in $^ ; do ./"$$t" ; done

sample1_unittest.exe:  $(d)/gtest_main.a $(d)/samples/sample1_unittest.o $(d)/samples/sample1.o
sample2_unittest.exe:  $(d)/gtest_main.a $(d)/samples/sample2_unittest.o $(d)/samples/sample2.o
sample3_unittest.exe:  $(d)/gtest_main.a $(d)/samples/sample3_unittest.o
sample4_unittest.exe:  $(d)/gtest_main.a $(d)/samples/sample4_unittest.o $(d)/samples/sample4.o
sample5_unittest.exe:  $(d)/gtest_main.a $(d)/samples/sample5_unittest.o $(d)/samples/sample1.o
sample6_unittest.exe:  $(d)/gtest_main.a $(d)/samples/sample6_unittest.o
sample7_unittest.exe:  $(d)/gtest_main.a $(d)/samples/sample7_unittest.o
sample8_unittest.exe:  $(d)/gtest_main.a $(d)/samples/sample8_unittest.o
sample9_unittest.exe:  $(d)/gtest_main.a $(d)/samples/sample9_unittest.o
sample10_unittest.exe: $(d)/gtest_main.a $(d)/samples/sample10_unittest.o
"""

def check_overwrite(fname):
    """warn when trying to overwrite existing file"""
    # False=overwrite, True=do not overwrite
    if os.path.isfile(fname):
        if args.skip==True:
            return True
        #elif args.force==True:
            #return False
        flag=False
        rawinput=input(' '.join([fname,
                                 'already exists, overwrite (y/n/q)? ']))
        raw=rawinput[0].lower()
        if raw=='y':
            flag=False
        elif raw=='n':
            flag=True
        elif raw=='q':
            print('abort')
            exit(1)
        else:
            print(rawinput,'does not match y/n/q, abort.')
            exit(1)
        return flag
    else:
        return False

#print(check_overwrite('/Users/qzmfrank/.vimrc'))

def strfile(fname,str):
    """create file, copy string into it"""
    fd=open(fname,'w')
    fd.write(str)
    fd.close()
    print(fname)

def strfile2(fname,str):
    """create file, copy string into it, check existing file"""
    if args.force:
        strfile(fname,str)
    elif check_overwrite(fname)==False:
        strfile(fname,str)

#strfile2('rootnew.mk',rootmk)

def find_root(directory):
    """return the absolute path of root.mk (excluding file name)"""
    flag = False
    root = os.path.realpath(directory)

    if os.path.isfile(os.path.join(root,'root.mk')):
        flag = True
    else:
        depth = 99 #default maximal depth of search
        for i in range(depth):
            root = os.path.normpath(os.path.join(root,'..'))
            #print(root)
            if root == '/':
                if os.path.isfile('/root.mk'):
                    flag = True
                break
            else:
                if os.path.isfile(os.path.join(root,'root.mk')):
                    flag = True
                    break
    if flag:
        return root
    else:
        print('root.mk not found')
        exit(1)


def gen_root(root,text):
    """generate root.mk"""
    fname = os.path.join(root,'root.mk')
    strfile2(fname,text)

#gen_root(args.root,rootmk)

def gen_branch(root,path,text,files):
    """generate rules.mk"""
    import fnmatch
    c_src   = fnmatch.filter(files,'*.c')
    cc_src  = fnmatch.filter(files,'*.cc')
    cpp_src = fnmatch.filter(files,'*.cpp')
    if len(c_src + cc_src + cpp_src) == 0:
        return

    fname = os.path.join(path,'rules.mk')
    strfile2(fname,text)

def gen_branch_only(directory,text):
    '''
    Generate rules.mk for one directroy
    '''
    directory   = os.path.abspath(directory)
    root  = find_root(directory)
    files = os.listdir(directory)
    gen_branch(root, directory, text, files)

def rwalk(directory,text):
    '''
    Generate rules.mk recursively
    '''
    root = find_root(directory)
    for path,dirs,files in os.walk(root):
        gen_branch(root, path, text, files)


def gen_makefile(directory, text):
    '''
    Generate Makefile in the given directory.
    '''
    root = find_root(directory)
    relpath = os.path.relpath(root, directory)
    tmp = text.replace('#RELATIVE_PATH_TO_ROOT#', relpath)
    strfile2('Makefile',tmp)


def delete_all(directory):
    '''
    Recursively delete all rules.mk files.
    '''
    #root=find_root(directory)
    for path,dirs,files in os.walk(directory):
        fname=os.path.join(path,'rules.mk')
        if os.path.isfile(fname):
            os.remove(fname)
            print('deleted',fname)
        fname = os.path.join(path, 'root.mk')
        if os.path.isfile(fname):
            os.remove(fname)
            print('deleted', fname)


def install_gtest():
    '''
    Install gtest to @rootdir.
    Requires internet connection and git to work.
    If git is not installed, return false and print error message.
    '''
    import shutil
    git = shutil.which('git')
    if not git:
        raise RuntimeError('Cannot find git in PATH. Please install git.')
    repo_url = 'https://github.com/google/googletest.git'
    cmdlist = [ git, 'clone', repo_url, 'gtest' ]

    import subprocess
    retval = subprocess.check_call(cmdlist)
    if retval != 0:
        print(file = sys.stderr, subprocess.list2cmdline(cmdlist))
        return false


if __name__ == '__main__':
    parser=argparse.ArgumentParser(
            description = 'Generating module files for constructing a single Makefile',
            formatter_class = argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('-C', '--directory',
            type    = str,
            default = '.',
            help    = 'the directory to work from')
    parser.add_argument('-R', '--recursive',
            action  = 'store_true',
            default = False,
            help    = 'recursively, works with -r, -b, -m')

    group_general=parser.add_mutually_exclusive_group()
    group_general.add_argument('-f', '--force',
            action  = 'store_true',
            default = False,
            help    = 'force overwriting existing files')
    group_general.add_argument('-s', '--skip',
            action  = 'store_true',
            default = False,
            help    = 'skip any existing file')

    group_mk=parser.add_mutually_exclusive_group(required = True)
    group_mk.add_argument('-b', '--branch',
            action  = 'store_true',
            default = False,
            help    = 'generate rules.mk for a single directory')
    group_mk.add_argument('-D', '--delete-recursively',
            action  = 'store_true',
            default = False,
            help    = 'recursively delete all .mk files in, implies -R')
    group_mk.add_argument('-g', '--gtest',
            action  = 'store_true',
            default = False,
            help    = 'install gtest with customized zmake-like Makefile and modules')
    group_mk.add_argument('-m', '--makefile',
            action  = 'store_true',
            default = False,
            help    = 'generate a Makefile')
    group_mk.add_argument('-r', '--root',
            action  = 'store_true',
            default = False,
            help    = 'generate [DIRECTORY]/root.mk')

    args = parser.parse_args()

    if args.branch:
        if args.recursive:
            rwalk(args.directory, template_files['rules.mk'])
        else:
            gen_branch_only(args.directory, template_files['rules.mk'])
    elif args.delete_recursively:
        delete_all(args.directory)
    elif args.gtest:
        # TODO: implement me!
        pass
    elif args.makefile:
        gen_makefile(args.directory, template_files['Makefile'])
    elif args.root:
        gen_root(args.directory,template_files['root.mk'])
