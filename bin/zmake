#!/usr/bin/env python3


import os
import glob
import fnmatch
import sys 
import argparse

parser=argparse.ArgumentParser(description=
    'Generating module files for constructing a single Makefile',
    prefix_chars='+-')

parser.add_argument('dir',action='store',nargs='?',default='.',
                   help='directory of source files (%(default)s)')

# group_general, mutually exlusive
group_general=parser.add_mutually_exclusive_group()
group_general.add_argument('-f','--force',action='store_true',default=False,
                   help='force overwriting existing files (%(default)s)')
group_general.add_argument('-s','--skip',action='store_true',default=False,
                   help='skip any existing file (%(default)s)')
group_general.add_argument('-d','--delete',action='store_true',default=False,
                    help='recursively delete all .mk files in [dir] (%(default)s)') 

group_mk=parser.add_mutually_exclusive_group()
group_mk.add_argument('-r','--root-only',action='store_true',default=False,
                 help='generate [dir]/root.mk (%(default)s)')
group_mk.add_argument('-b','--branch-only',action='store_true',default=False,
                 help='generate [dir]/rules.mk (%(default)s)')
group_mk.add_argument('-R','--recursive',action='store_true',default=False,
                 help='recursively generate rules.mk\'s (%(default)s)') 

# group_makefile
group_makefile=parser.add_argument_group('Makefile')
group_makefile.add_argument('-g','--makefile',action='store_true',default=False,
         help='generate a Makefile (%(default)s)')
group_makefile.add_argument('-o',dest='target',action='store',default='./Makefile',
                  help='output the Makefile to TARGET (%(default)s)') 
group_insource=group_makefile.add_mutually_exclusive_group()
group_insource.add_argument('--in-source',dest='insource',action='store_true',
                            default=True,help='Makefile builds in-source')
group_insource.add_argument('--out-of-source',dest='insource',action='store_false',
                            default=False,help='Makefile builds out-of-source')
#group_makefile.add_argument('-n','--max-recursive-depth',metavar='N',type=int,default=99,
                  #help='search depth when creating Makefile (%(default)s)') 


#parser.set_defaults(verbose=False)
args = parser.parse_args()



rootmk="""################################################################################
#	PROJECT-WIDE COMMON COMPILING FLAGS 
CC		:=icc
CFLAGS 		:=-O3							\\
		-Wall							\\
		-std=c99						\\
		-Wno-deprecated

CXX		:=icpc
CXXFLAGS	:=-O3							\\
		-Wall							\\
		-Wno-deprecated

#       PROJECT-WIDE DEFAULT LINKING LIBRARIES AND INCLUDE DIRECTORIES
INCS		:=-iquote ${ROOT}
LIBS		:=
################################################################################
#		INTERNAL VARIABLES
OBJ		:=# .o files
DEP		:=# .d files
ASM		:=# .s files
DEPFLAGS	:=-MMD -MP# preprocessor generates .d files
ASMFLAGS	:=-S -fsource-asm# source code commented assembly code 
.SUFFIXES:
################################################################################
# 	OUT-OF-SOURCE PATTERN RULES
ifeq (OUT_OF_SOURCE,TRUE)
${BUILD}/%.exe: ${BUILD}/%.o
	${QUIET}${CXX} -o $@ $^ ${LIBS} 
endif
"""

branchmk="""################################################################################
#  THIS DIRECTORY
DIR:=${ROOT}#RELATIVE_PATH_FROM_ROOT#
#  ALL C/C++ FILES IN THIS DIRECTORY (WITHOUT PATHNAME)
${DIR}C:=#LIST_C_SOURCE_FILES#
${DIR}CPP:=#LIST_CPP_SOURCE_FILES# 
#  DIRECTORY-SPECIFIC COMPILING FLAGS AND INCLUDE DIRECTORIES
${DIR}CFLAGS:=${CFLAGS}
${DIR}CXXFLAGS:=${CXXFLAGS}
${DIR}INCS:=${INCS}
################################################################################ 
#		INTERNAL VARIABLES AND PATTERN RULES
ifeq (${OUT_OF_SOURCE},TRUE)
# out-of-source build
# Add local targets to global variables
DEP:=${DEP} ${${DIR}CPP:%.cpp=${DIR}/%.d} ${${DIR}C:%.c=${DIR}/%.d} 
OBJ:=${OBJ} ${${DIR}CPP:%.cpp=${DIR}/%.o} ${${DIR}C:%.c=${DIR}/%.o} 
ASM:=${ASM} ${${DIR}CPP:%.cpp=${DIR}/%.s} ${${DIR}C:%.c=${DIR}/%.s} 
# C sources
${BUILD}/%.o: ${DIR}/%.c
	${QUIET}${CC} -o $@ -c $< ${DEPFLAGS} ${${DIR}CFLAGS} ${${DIR}INCS}
${BUILD}/%.s: ${DIR}/%.c
	${QUIET}${CC} -o $@ $< ${ASMFLAGS} ${${DIR}CFLAGS} ${${DIR}INCS}

# C++ sources
${BUILD}/%.o: ${DIR}/%.cpp
	${QUIET}${CXX} -o $@ -c $< ${DEPFLAGS} ${${DIR}CXXFLAGS} ${${DIR}INCS}
${BUILD}/%.s: ${DIR}/%.cpp
	${QUIET}${CXX} -o $@ $< ${ASMFLAGS} ${${DIR}CXXFLAGS} ${${DIR}INCS}
else
# in-place build
# Add local targets to global variables
DEP:=${DEP} ${${DIR}CPP:%.cpp=${DIR}/%.d} ${${DIR}C:%.c=${DIR}/%.d} 
OBJ:=${OBJ} ${${DIR}CPP:%.cpp=${DIR}/%.o} ${${DIR}C:%.c=${DIR}/%.o} 
ASM:=${ASM} ${${DIR}CPP:%.cpp=${DIR}/%.s} ${${DIR}C:%.c=${DIR}/%.s} 

# C sources
${DIR}/%.o: ${DIR}/%.c
	${QUIET}${CC} -o $@ -c $< ${DEPFLAGS} ${${DIR}CFLAGS} ${${DIR}INCS}
${DIR}/%.s: ${DIR}/%.c
	${QUIET}${CC} -o $@ $< ${ASMFLAGS} ${${DIR}CFLAGS} ${${DIR}INCS}

# C++ sources
${DIR}/%.o: ${DIR}/%.cpp
	${QUIET}${CXX} -o $@ -c $< ${DEPFLAGS} ${${DIR}CXXFLAGS} ${${DIR}INCS}
${DIR}/%.s: ${DIR}/%.cpp
	${QUIET}${CXX} -o $@ $< ${ASMFLAGS} ${${DIR}CXXFLAGS} ${${DIR}INCS}

# Linking pattern rule for this directory
%.exe: ${DIR}/%.o
	${QUIET}${CXX} -o $@ $^ ${LIBS}
endif 
"""

makefile="""#  Sample Makefile
################################################################################
#	ROOT LEVEL INFO - MAKEFILE SPECIFIC
#INSOURCE#OUT_OF_SOURCE:=TRUE# TRUE = out-of-source build, otherwise = in-source build
#INSOURCE#BUILD:=.# out-of-source build directory, unused in in-source build mode
# Strongly recommend only using ${BUILD}=. as it simplifies the linking rules
#QUIET:=@# uncomment this line to silence
ROOT :=#ABSOLUTE_ROOT_OF_SOURCE_FILES#
# Include the top-level .mk file, i.e., the root.mk
-include ${ROOT}/root.mk
# Include all branches here
-include ${ROOT}#INCLUDE_ALL_BRANCHES_HERE#
# Then include all dependency files
-include ${DEP}
################################################################################ 
#	LIST YOUR LINKING RULES HERE

# Sample linking rules for out-of-source build:
# If ${BUILD}==. (current directory), then we can use the following linking rule
#diffpar.exe: diffpar.o utils.o
#test_heapsort.exe: heapsort.o test_heapsort.o utils.o

# If ${BUILD} is anything else, we have to use the following linking rule
#${BUILD}/diffpar.exe: ${BUILD}/diffpar.o ${BUILD}/utils.o
#${BUILD}/test_heapsort.exe: ${BUILD}/heapsort.o ${BUILD}/test_heapsort.o ${BUILD}/utils.o


# Sample linking rules for in-source build:
#test_heapsort.exe: ${ROOT}/heapsort/heapsort.o \\
	#${ROOT}/heapsort/test_heapsort.o \\
	#${ROOT}/utils/utils.o
################################################################################
#	MISC PHONY TARGETS 
.PHONY: all asm clean cleanx cleanxx

all: ${OBJ}

asm: ${ASM}

clean:
	${QUIET}rm -f ${OBJ}
cleanx:
	${QUIET}rm -f ${DEP} ${ASM}
cleanxx: clean cleanx
	${QUIET}rm -f *.exe
"""
texts=dict()
texts['root']=rootmk
texts['branch']=branchmk
texts['makefile']=makefile

def check_overwrite(fname):
    """warn when trying to overwrite existing file"""
    # False=overwrite, True=do not overwrite
    if os.path.isfile(fname):
        flag=False
        rawinput=input(' '.join([fname,
                                 'already exists, overwrite (y/n/q)? ']))
        raw=rawinput[0].lower()
        if raw=='y':
            flag=False 
        elif raw=='n':
            flag=True
        elif raw=='q': 
            print('abort')
            exit(1)
        else:
            print(rawinput,'does not match y/n/q, abort.')
            exit(1)
        return flag
    else:
        return False

#print(check_overwrite('/Users/qzmfrank/.vimrc'))

def strfile(fname,str):
    """create file, copy string into it""" 
    fd=open(fname,'w')
    fd.write(str)
    fd.close()
    print('generated',fname)

def strfile2(fname,str):
    """create file, copy string into it, check existing file"""
    if args.force:
        strfile(fname,str)
    elif args.skip:
        pass
    else:
        if check_overwrite(fname)==False:
            strfile(fname,str) 

#strfile2('rootnew.mk',rootmk)

def find_root(dir):
    flag=False
    root=os.path.normpath(os.path.join(os.getcwd(),dir))
    if os.path.isfile(os.path.join(root,'root.mk')):
        flag=True
    else:
        #print('search \'root.mk\' in:')
        depth=99
        for i in range(depth):
            root=os.path.normpath(os.path.join(root,'..'))
            #print(root)
            if root=='/':
                if os.path.isfile('/root.mk'):
                    flag=True
                break
            else:
                if os.path.isfile(os.path.join(root,'root.mk')):
                    flag=True
                    break 
    if flag:
        return root 
    else:
        print('root.mk not found')
        exit(1)

#find_root(args.dir,args.max_recursive_depth)

def gen_root(root,text):
    """generate root.mk"""
    fname=os.path.join(root,'root.mk')
    strfile2(fname,text)

#gen_root(args.root,rootmk)

def gen_branch(dir,path,text,files):
    """generate rules.mk"""
    c_src=fnmatch.filter(files,'*.c')
    cpp_src=fnmatch.filter(files,'*.cpp')
    if len(c_src)+len(cpp_src)>0:
        fname=os.path.join(path,'rules.mk') 
        tmp=text.replace('#RELATIVE_PATH_FROM_ROOT#',
                        path.replace(os.path.normpath(dir),''))
        c_str=' '.join(c_src)
        tmp=tmp.replace('#LIST_C_SOURCE_FILES#',c_str) 
        cpp_str=' '.join(cpp_src)
        tmp=tmp.replace('#LIST_CPP_SOURCE_FILES#',cpp_str)
        strfile2(fname,tmp)

def gen_branch_only(dir,text):
    """only generate one rules.mk"""
    root=find_root(dir)
    path=os.path.normpath(dir)
    files=next(os.walk(path))[2] # only files, no subdirectories
    gen_branch(root,path,text,files)

def rwalk(dir,texts):
    """recursively rules.mk's"""
    root=find_root(dir)
    for path,dirs,files in os.walk(root):
        gen_branch(root,path,texts['branch'],files)

#rwalk(args.dir,texts)

def rwalk_skip(dir,texts):
    """recursively generate rules.mk's, skip any existing file"""
    root=find_root(dir)
    for path,dirs,files in os.walk(root): 
        if os.path.isfile(os.path.join(path,'rules.mk'))==False:
            gen_branch(root,path,texts['branch'],files)
    return True


def collect_branch(root):
    dirlist=list()
    for path,dirs,files in os.walk(root):
        fname=os.path.join(path,'rules.mk')
        if os.path.isfile(fname):
            dirlist.append(os.path.join(path.replace(root,''),'rules.mk'))
    return dirlist


def gen_makefile(insource,dir,target,text):
    """recursively find root.mk before generating makefile"""
    root=find_root(dir)
    tmp=text.replace('#ABSOLUTE_ROOT_OF_SOURCE_FILES#',root)
    #dirlist=list()
    #for path,dirs,files in os.walk(root):
        #fname=os.path.join(path,'rules.mk')
        #if os.path.isfile(fname):
            #dirlist.append(os.path.join(path.replace(root,''),'rules.mk'))
    dirlist=collect_branch(root)
    tmp=tmp.replace('#INCLUDE_ALL_BRANCHES_HERE#',
                    '\n-include ${ROOT}'.join(dirlist)) 

    if args.insource:
        tmp=tmp.replace('#INSOURCE#','#')
    else:
        tmp=tmp.replace('#INSOURCE#','') 

    strfile2(target,tmp)

#rgen_imakefile(args.root,args.target,texts,args.max_recursive_depth)

def delete_all(dir):
    """recursively delete all .mk files"""
    #root=find_root(dir)
    for path,dirs,files in os.walk(dir):
        fname=os.path.join(path,'rules.mk')
        if os.path.isfile(fname):
            os.remove(fname)
            print('deleted',fname)
        fname=os.path.join(path,'root.mk')
        if os.path.isfile(fname):
            os.remove(fname)
            print('deleted',fname) 

if args.delete:
    delete_all(args.dir)
    exit(0)
if args.root_only:
    gen_root(args.dir,texts['root'])
if args.branch_only:
    gen_branch_only(args.dir,texts['branch'])
if args.recursive:
    rwalk(args.dir,texts) 
if args.makefile:
    gen_makefile(args.insource,args.dir,args.target,texts['makefile'])
