			Context Free Grammar of the New Makefile

digit			[0-9]
fchar			[A-Za-z0-9._-] // filename char
fchar0			[A-Za-z0-9._]  // first char of filename

"\0"			NULL
"\t"			TAB
"\n"			EOL
"\"			CAT // concatenate two lines, i.e., ignore the next EOL
{fchar0}{fchar}+	FNAME // POSIX fully compatible char set
-?{digit}+		NUM // only support C int
\(.+\)			LVAR // local variable
\{.+\}			GVAR // global variable

assignment -> var := rhs | var += rhs | var -= rhs

rhs -> fnames | vars | rhs [vars fnames]

vars -> var | vars var

var -> $(string) | ${string}

fnames -> fname | fnames fname

fname -> [A-Za-z0-9._](fname_char)+

fname_char -> [A-Za-z0-9._-]

rule -> fname : rhs recipe
      | fname : recipe
      | fname : rhs

pattern_rule -> pattern : patterns
	| pattern : patterns recipe
	| pattern : recipe

pattern -> .*%.*

recipe -> ^\t.*



Line extension using backslash '\' is done in the preprocessing stage. The
preprocessor removes the backslash, any trailing spaces, tabs, and the newline
character '\n', concatenate the ensuring line with all spaces and tabs removed

			Rationale

Makefile
